CACHING :
catching is a very easy way improve the "read" performance of our application.

Caching refers to the process of storing data in a temporary storage area (called a cache) so that future requests for that data can be served faster

Anytime we refresh a page in our browser, we are issuing two request to the db.

The browser first visits the site , then the app loads in the browser. the app makes a request to the backend to figure out who the current user is and also retrieve a list of items that belongs to the user.

The request is received by our express api, the it sends the request to the respective route handler

Then the route handlers sees the incoming request and uses the mongoose library to reach out to mongodb and retrieves some amount of information

anytime mongoose issues a query, it will first go over to the cache server, the cache checks if the query has been issued before, if it hasn't it sends it over to mongodb and mongodb issues thw query, the query goes back to the catch server, the catch will then store the result of that query, the catch then takes the response and sends it back to mongoose, the mongoose gives to express, the express gives it to browser



node redis






node
const redis = require('redis')
const redisUrl = 'redis://127.0.0.1:6379'
const client = redis.createClient(redisUrl)

client consist of a bunch of object items that allows us to manipulate with redis instance

eg client.set('hi', 'there')
this saves in the redis with KEY of hi, and VALUE of there.

to retrieve the value we use
client.get('hi', (err, value) => console.log(value))

client.get('hi',console.log)

hget (hashGet)
hset(hashSet)

for storing a nested object to a dataset in redis 

const redisValue = {
  (key)      spanish: {
  (values)      red: 'rojo',
                orange: 'naranja',
                blue : "azul"
    },
    german: {
        red : rot,
        orange : "orange",
        blue : "blau"
    }
}


> client.hset('german', 'red', 'rot')
true
> client.hget('german', 'red', console.log)
true
> null rot



we cannot store a plane js object inside redis, we can only store numbers and letters

client.set('colors', JSON.stringify({red: 'rojo'}))

client.get('hi', (err, value) => console.log(JSON.parse(value)))
or
 client.get('colors', console.log)



to delete our redis contents
 client.flushall()

[
TO SET EXPIRATION TIME
We will be able to retrieve this value from redis but after 5 sec it disappears from redis and we wont be able to retrieve it again.

 client.set('color', 'red', 'EX', 5)
]



THE FLOW

 (check to see if this query has been executed)
 query.exec = function (){
    ( check to see if the query has been executed, and if it has, return the result right away)

    client.get('query key)
    if(result){
        return result;
    }

    (otherwise issue the query as normal)
    const result = runTheOriginalFunction();

   (then save that value in the redis)
    client.set('query key', result)

    return result;
 }